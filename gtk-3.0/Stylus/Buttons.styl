
ButtonGlossTop = gloss-color(lighter, faded);
ButtonGlossBottom = gloss-color(darker, faded);


/* BUTTON-TEXT-COLOR - Sets parameters controlling the color of text and colorized images that are children of buttons.
 *
 *  SYNTAX:
 *      button-text-color:  c
 *
 *  INPUT:
 *      c:      RGBA
 *              The desired color of button text and colorized images.
 */
button-text-color(c)
    color:      c;
    image, label
        color:  c;


/* BUTTON - Controls all button widgets. */
button,
button.popup
    @extends GtkWidget;

    background-color:               transparent;
    background-image:               vgradient(ButtonGlossTop, ButtonGlossBottom);
    bevel:                          1px inset;
    border-radius:                  0.375em;
    box-shadow:                     inset 0px 0px 2px shadow-color(normal, semifaded);
    padding:                        0.5em;

    /* ACTIVE - Controls buttons currently undergoing a mouse click.
     *
     * CHECKED - Controls toggle-like buttons that have been pressed.
     */
    &:active,
    &:checked
        deep-inset();
        background-image:           SelectionGradientVerticalInverted;
        button-text-color:          TextColorSelected;
        &:backdrop, &:hover
            background-image:       HighlightGradientVerticalInverted;
            button-text-color:      TextColorHighlighted;

    &.flat
        flat();
        border:                     1px solid transparent;
        border-radius:              0.25em;

        &:active, &:checked
            @extends button:active;
        &:hover
            background-color:       HighlightColor;
            background-image:       none;
            box-shadow:             none;

    &:hover
        background-image:           HighlightGradientVertical;
        button-text-color:          TextColorHighlighted;
        box-shadow:                 inset 0px 0px 2px shadow-color(darker, semiopaque);

    // Governs linked button groups that are horizontally oriented
    .linked > &,
    .horizontal.linked > &
        border-radius:              0em;
        border-width:               1px 0.25px;

        &:first-child
            border-radius:          0.375em 0em 0em 0.375em;
            border-left-width:      1px;
        &:last-child
            border-radius:          0px 0.375em 0.375em 0px;
            border-right-width:     1px;
        &:only-child
            border-radius:          0.375em;
            border-width:           1px;

    // Governs linked button groups that are vertically oriented
    .vertical.linked > &
        background-image:           hgradient(ButtonGlossTop, ButtonGlossBottom);
        border-radius:              0em;
        border-width:               0.25px 1px;

        &:hover
            background-image:       HighlightGradientHorizontal;

        &:first-child
            border-radius:          0.375em 0.375em 0em 0em;
            border-top-width:       1px;
        &:last-child
            border-radius:          0em 0em 0.375em 0.375em;
            border-bottom-width:    1px;
        &:only-child
            border-radius           0.375em;
            border-width:           1px;

    notebook tab &
        padding:                    0.75em;

spinbutton
    flat();
    border-width:                   0px 0px 0px 0.25px;
    box-shadow:                     none;
    padding:                        0em;

    &:hover *
        color:                      SelectionColor;
        &:backdrop                  { color: HighlightColor; }

    &.horizontal
        entry, button
            padding:                0.5em 0.5em;

        & > entry
            border-radius:          2em 0em 0em 2em;
            padding-left:           0.75em;
        & > button.down
            border-radius:          0em;
        & > button.up
            border-radius:          0em 2em 2em 0em;

    &.vertical
        & > button.down
            border-radius:          0em 0em 2em 2em;
        & > button.up
            border-radius:          2em 2em 0em 0em;
        & > entry
            border-radius:          0em;
            padding:                0.125em;


/* COLUMN-HEADER - Governs the title buttons at the top of sortable lists. */
treeview
    margin:                         0em;

    header button
        @extends button.flat
        background-color:           gloss-color(lighter, faded);
        background-clip:            padding-box;
        border:                     none;
        border-radius:              0px
        border-top:                 1px solid transparent;

        &:first-child
            border-radius:      2.5px 0px 0px 0px;
            border-left:        1px solid transparent;
        &:last-child
            border-radius:      0px 2.5px 0px 0px;
            border-right:       1px solid transparent;

/* TITLEBUTTON - Governs the standard close, maximize, and minimize buttons for CSD windows. */
button.titlebutton
    blank();
    padding:        0px;

    image:          "../unity/Core/Button.svg";

    &.close, &.maximize, &.minimize
        &:backdrop
            image:  "../unity/Core/Button.svg";

    &.close
        image:      "../unity/Core/Close.svg";
        &:hover     { image: "../unity/Core/CloseHover.svg"; }

    &.maximize
        image:      "../unity/Core/Maximize.svg";
        &:hover     { image: "../unity/Core/MaximizeHover.svg"; }
    &.minimize
        image:      "../unity/Core/Minimize.svg";
        &:hover     { image: "../unity/Core/MinimizeHover.svg"; }

    image
        color:      black;
